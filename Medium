Challenge Name: Highest-Grossing Items

WITH t as(
  SELECT  category, product, 
  SUM(spend) as total_spend
  FROM product_spend
  WHERE EXTRACT(YEAR from transaction_date) = '2022'
  GROUP BY category, product
),

t1 as(
  SELECT *,
  RANK() OVER (partition by category order by total_spend Desc) as ranking
  FROM t
)

SELECT category, product, total_spend
FROM t1 
WHERE ranking < 3;


============================================================================================

Challenge Name: Repeat Purchases on Multiple Days

SELECT Count(Distinct user_id) as num_user
FROM 
(SELECT user_id, product_id, Count(Distinct DATE(purchase_date)) 
FROM purchases
GROUP BY user_id, product_id
HAVING Count(Distinct DATE(purchase_date)) > 1) as t;


--- OR --- Using CTE and Rank() ----

WITH ranking AS (
  SELECT 
    user_id, 
    RANK() OVER (PARTITION BY user_id, product_id 
      ORDER BY DATE(purchase_date) ASC
    ) AS purchase_no 
  FROM 
    purchases
) 
SELECT 
  COUNT(DISTINCT user_id) AS users_num 
FROM 
  ranking 
WHERE 
  purchase_no = 2;


============================================================================================

Challenge Name: Compensation Outliers

WITH t as (
  SELECT *,
  AVG(salary) OVER(partition by title) as avg_sal
  FROM employee_pay
)

SELECT employee_id, salary,
CASE WHEN salary > 2 * avg_sal THEN 'Overpaid'
     WHEN salary < 0.5 * avg_sal THEN 'Underpaid'
     END as status
FROM t  
WHERE salary > 2 * avg_sal OR salary < 0.5 * avg_sal;  

============================================================================================

Challenge Name: User's Third Transaction

SELECT user_id, spend, transaction_date
FROM (SELECT *, 
  RANK() OVER(partition by user_id order by transaction_date) as trans_num
  FROM transactions) t
WHERE trans_num = 3

============================================================================================

Challenge Name: Purchasing Activity by Product Type

Solution:
SELECT order_date, product_type,
Sum(quantity) OVER (partition by product_type ORDER BY order_date) as cum_purchased
FROM total_trans
ORDER BY order_date;

============================================================================================

Challenge Name: Sending Vs. opening Snaps

SELECT 
age_bucket,
ROUND(SUM(CASE WHEN activity_type = 'send' THEN time_spent ELSE 0 END)*100/
  SUM(CASE WHEN activity_type <> 'chat' THEN time_spent ELSE 0 END), 2) as send_perc,
ROUND(SUM(CASE WHEN activity_type = 'open' THEN time_spent ELSE 0 END)*100/
  SUM(CASE WHEN activity_type <> 'chat' THEN time_spent ELSE 0 END), 2) as open_perc
FROM activities a INNER JOIN age_breakdown b on a.user_id = b.user_id
GROUP BY age_bucket;
============================================================================================

Challenge Name: Odd and Even Measurements

WITH t as (
  SELECT *,
  ROW_NUMBER() OVER(PARTITION BY DATE_PART('day', measurement_time) ORDER BY measurement_time) as num_m
  FROM measurements
)

SELECT DATE(measurement_time),
SUM(CASE WHEN num_m%2 <> 0 THEN measurement_value ELSE 0 END) as odd_sum,
SUM(CASE WHEN num_m%2 = 0 THEN measurement_value ELSE 0 END) as even_sum
FROM t
GROUP BY DATE(measurement_time)
ORDER BY DATE(measurement_time);

============================================================================================

Challenge Name: Frequently Purchased Pairs

WITH purchases as (
  SELECT transaction_id, t.product_id, product_name 
  FROM transactions t INNER JOIN products p 
  ON t.product_id = p.product_id
)

SELECT p1.product_name, p2.product_name, COUNT(*) as combo_num
FROM purchases p1 INNER JOIN purchases p2
ON p1.transaction_id = p2.transaction_id
AND p1.product_id > P2.product_id
GROUP BY p1.product_name, p2.product_name
ORDER BY combo_num DESC
LIMIT 3;

============================================================================================

Challenge Name: First Transaction

WITH t as (
  SELECT *,
  RANK() OVER(PARTITION BY user_id ORDER BY transaction_date, transaction_id) as t_rank
  FROM user_transactions
)

SELECT COUNT(user_id)
FROM T 
WHERE t_rank = 1 
AND spend > 50.0;

============================================================================================

Challenge Name: First Transaction

WITH t as (
  SELECT *,
  RANK() OVER(PARTITION BY user_id ORDER BY transaction_date, transaction_id) as t_rank
  FROM user_transactions
)

SELECT COUNT(user_id)
FROM T 
WHERE t_rank = 1 
AND spend > 50.0;


============================================================================================

Challenge Name: LinkedIn Power Creaters (Part 2)

WITH max_company AS (
  SELECT p.profile_id, p.followers, MAX(c.followers) as comp_followers
  FROM personal_profiles p JOIN employee_company e ON p.profile_id = e.personal_profile_id
  JOIN company_pages c ON e.company_id = c.company_id
  GROUP BY p.profile_id, p.followers
  )
  
SELECT profile_id
FROM max_company
WHERE followers > comp_followers
ORDER BY profile_id


============================================================================================

Challenge Name: Top 5 Artists

WITH Top_10_Rank AS (
  SELECT a.artist_name,  COUNT(r.song_id) as top_10_appearances
  FROM artists a JOIN songs s ON a.artist_id = s.artist_id
  JOIN global_song_rank r ON s.song_id = r.song_id
  WHERE rank < 11
  GROUP BY a.artist_name
  ),
  
Top_Artists AS (
  SELECT artist_name, 
  DENSE_RANK() OVER(ORDER BY top_10_appearances DESC) as artist_rank
  FROM Top_10_Rank
  )
  
SELECT *
FROM Top_Artists
WHERE artist_rank < 6 ;


============================================================================================

Challenge Name: Signup Confirmation Rate

SELECT ROUND(1.0 * COUNT(user_id) / (SELECT COUNT(user_id)  FROM emails), 2) 
FROM emails e JOIN texts t on e.email_id = t.email_id
WHERE signup_action = 'Confirmed';


============================================================================================

Challenge Name: Spotify Streaming History

WITH Temp AS (

  SELECT user_id, song_id, COUNT(song_id) as song_plays
  FROM songs_weekly
  WHERE listen_time <= '08/04/2022 23:59:59'
  GROUP BY user_id, song_id
  
  UNION ALL
  
  SELECT user_id, song_id, song_plays
  FROM songs_history
  )
  
SELECT user_id, song_id, SUM(song_plays) as song_count
FROM Temp
GROUP BY user_id, song_id
ORDER BY song_count DESC;


============================================================================================

Challenge Name: Same week Purchases

SELECT ROUND(100.0 * COUNT(DISTINCT p.user_id) / COUNT(DISTINCT s.user_id), 2)
FROM signups s LEFT JOIN user_purchases p ON s.user_id = p.user_id
WHERE purchase_date IS NULL
OR (purchase_date BETWEEN signup_date AND (signup_date + '7 days'::INTERVAL));


============================================================================================

Challenge Name: Invalid Search Results

WITH Pct AS (
  SELECT country, SUM(num_search) as total_search 
  ,ROUND(SUM(num_search * invalid_result_pct /100), 2) as invalid_search
  FROM search_category
  WHERE invalid_result_pct IS NOT NULL
  GROUP BY country
  )

SELECT country, total_search 
,ROUND((100 * invalid_search / total_search), 2) as invalid_search_pct
FROM Pct
ORDER BY country ASC;


============================================================================================

Challenge Name: Tweets' Rolling Averages

WITH Temp AS (
  SELECT user_id, tweet_date, COUNT(DISTINCT tweet_id) as num_tweet
  FROM tweets
  GROUP BY user_id, tweet_date
  ORDER BY user_id, tweet_date 
  )
  
SELECT user_id, tweet_date
,ROUND(AVG(num_tweet) OVER(PARTITION BY user_id ORDER BY user_id, tweet_date 
    ROWS BETWEEN 2 PRECEDING AND CURRENT ROW ), 2) as rolling_3day_avg
FROM Temp


============================================================================================

Challenge Name: USer Shopping Sprees

SELECT  DISTINCT t1.user_id
FROM transactions t1 JOIN transactions t2 
  ON Date(t2.transaction_date) = Date(t1.transaction_date) + 1
  JOIN transactions t3 
  ON Date(t3.transaction_date) = Date(t1.transaction_date) + 2
ORDER BY t1.user_id


============================================================================================

Challenge Name: Fill Missing Client Data

WITH Cat_Table AS (
  SELECT * ,
  COUNT(category) OVER(ORDER BY product_id) as cat_grp
  FROM products
  )
  
SELECT product_id
,FIRST_VALUE(category) OVER(PARTITION BY cat_grp) as category
,name
FROM Cat_Table;


============================================================================================

Challenge Name: Mean, Median, Mode

SELECT ROUND(AVG(email_count)) as mean
, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY email_count) as median
, MODE() WITHIN GROUP (ORDER BY email_count) as mode
FROM inbox_stats;


============================================================================================

Challenge Name: Pharmacy Analytics (Part 4)

WITH T AS(
  SELECT manufacturer, drug
  , DENSE_RANK() OVER(PARTITION BY manufacturer ORDER BY units_sold DESC) as rnk
  FROM pharmacy_sales
  )

SELECT manufacturer, drug
FROM T
WHERE rnk<=2
ORDER BY manufacturer;


============================================================================================

Challenge Name: Supercloud Customer

WITH T AS (
  SELECT customer_id, COUNT(DISTINCT p.product_category) as cat_count
  FROM customer_contracts c JOIN products p ON c.product_id = p.product_id
  GROUP BY customer_id
)

SELECT customer_id
FROM T
WHERE cat_count = (SELECT COUNT(DISTINCT product_category) from products);


============================================================================================

Challenge Name: Card Launch Success

WITH T AS (
  SELECT card_name,
  Dense_Rank() OVER(PARTITION BY card_name ORDER BY issue_year, issue_month) as month_rnk ,
  issued_amount
  FROM monthly_cards_issued
  )

SELECT card_name, issued_amount
FROM T 
WHERE month_rnk = 1
ORDER BY issued_amount DESC

============================================================================================

Challenge Name: Compressed Mode

SELECT item_count 
FROM items_per_order
WHERE order_occurrences = (SELECT MODE() WITHIN GROUP (ORDER BY order_occurrences DESC) FROM items_per_order)
ORDER BY item_count;

============================================================================================

Challenge Name: International Call Percentage

WITH T AS (
  SELECT  c.country_id as caller_cntry, r.country_id as rec_cntry
  FROM phone_calls p JOIN phone_info c on p.caller_id = c.caller_id
  JOIN phone_info r on p.receiver_id = r.caller_id
  )
  
SELECT ROUND( (SUM(CASE WHEN rec_cntry<>caller_cntry THEN 1 ELSE 0 END)*100.0
  / (SELECT COUNT(*) from T)), 1)
FROM T

