Challenge Name: Cities With Completed Trades

Solution:

SELECT city, Count(order_id) c
FROM trades t inner join users u on t.user_id = u.user_id
WHERE status='Completed'
GROUP BY city
ORDER BY c desc
LIMIT 3

============================================================================================

Challenge Name: Page With No Likes

Solution:

SELECT page_id
FROM pages
Where page_id not in ( SELECT distinct page_id from page_likes);

============================================================================================

Challenge Name: Laptop vs Mobile Viewership

Solution:

SELECT
Sum(CASE WHEN device_type = 'laptop' THEN 1 ELSE 0 END) as laptop_views,
Sum(CASE WHEN device_type <> 'laptop' THEN 1 ELSE 0 END) as mobile_views
FROM viewership;

============================================================================================

Challenge Name: Purchasing Activity by Product Type

Solution:
SELECT order_date, product_type,
Sum(quantity) OVER (partition by product_type ORDER BY order_date) as cum_purchased
FROM total_trans
ORDER BY order_date;

============================================================================================

Challenge Name: Teams Power Users

SELECT sender_id, Count(message_id) c
FROM messages
WHERE EXTRACT(Month FROM sent_date) = '8' and EXTRACT(YEAR FROM sent_date) = '2022'
GROUP BY sender_id
ORDER BY c Desc
LIMIT 2;

============================================================================================

Challenge Name: Highest Number of Products

SELECT user_id, Count(product_id) as product_num
FROM user_transactions
GROUP BY user_id
having Sum(spend) >= 1000
ORDER BY product_num Desc, Sum(spend) Desc
LIMIT 3;

============================================================================================

Challenge Name: Histogram of Tweets

With t as
(SELECT user_id, COUNT(tweet_id) as num_tweets
FROM tweets
WHERE tweet_date BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY user_id)

SELECT num_tweets, Count(user_id) as num_users
FROM t
group by num_tweets;

============================================================================================

Challenge Name: Spare Server Capacity

With t as 
(SELECT  f.datacenter_id, monthly_capacity, Sum(monthly_demand) as demand
FROM forecasted_demand f 
INNER JOIN datacenters d on f.datacenter_id = d.datacenter_id
GROUP BY f.datacenter_id, monthly_capacity)

SELECT datacenter_id, (monthly_capacity - demand) as spare_capacity
FROM t
ORDER BY datacenter_id;


============================================================================================

Challenge Name: Repeat Purchases on Multiple Days

SELECT Count(Distinct user_id) as num_user
FROM 
(SELECT user_id, product_id, Count(Distinct DATE(purchase_date)) 
FROM purchases
GROUP BY user_id, product_id
HAVING Count(Distinct DATE(purchase_date)) > 1) as t;


--- OR --- Using CTE and Rank() ----

WITH ranking AS (
  SELECT 
    user_id, 
    RANK() OVER (PARTITION BY user_id, product_id 
      ORDER BY DATE(purchase_date) ASC
    ) AS purchase_no 
  FROM 
    purchases
) 
SELECT 
  COUNT(DISTINCT user_id) AS users_num 
FROM 
  ranking 
WHERE 
  purchase_no = 2;


============================================================================================

Challenge Name: Duplicate Job Listings

WITH t as (
SELECT RANK() OVER(partition by company_id,  title, description order by job_id) as dup_rank
FROM job_listings)

SELECT count(*) FROM t WHERE dup_rank <> 1; 


============================================================================================

Challenge Name: Average Post Hiatus (Part 1)

SELECT user_id,
MAX(post_date::DATE) - MIN(post_date:: DATE) as days_between
FROM posts
WHERE EXTRACT(YEAR from post_date) = '2021'
GROUP BY user_id
HAVING Count(post_id)>1;

============================================================================================

Challenge Name: App Clickthrough Rate (CTR)

SELECT app_id,
ROUND( 
  (Sum(CASE WHEN event_type = 'click' THEN 1 ELSE 0 END)*100.0) /
    Sum(CASE WHEN event_type = 'impression' THEN 1 ELSE 0 END)
  , 2) as ctr
FROM events
WHERE EXTRACT (YEAR from timestamp) = '2022'
GROUP BY app_id;

============================================================================================

Challenge Name: User's Third Transaction

SELECT user_id, spend, transaction_date
FROM (SELECT *, 
  RANK() OVER(partition by user_id order by transaction_date) as trans_num
  FROM transactions) t
WHERE trans_num = 3

============================================================================================

Challenge Name: Highest-Grossing Items

WITH t as(
  SELECT  category, product, 
  SUM(spend) as total_spend
  FROM product_spend
  WHERE EXTRACT(YEAR from transaction_date) = '2022'
  GROUP BY category, product
),

t1 as(
  SELECT *,
  RANK() OVER (partition by category order by total_spend Desc) as ranking
  FROM t
)

SELECT category, product, total_spend
FROM t1 
WHERE ranking < 3;


============================================================================================

Challenge Name: Histogram of Users and Purchases

WITH t as (
  SELECT user_id, product_id, transaction_date,
  RANK() OVER (partition by user_id order by transaction_date Desc) as ranking
  FROM user_transactions
 )
  
SELECT  transaction_date, Count(Distinct user_id) as num_users, 
Count(product_id) as num_products 
FROM t
WHERE ranking = 1
GROUP BY transaction_date;

============================================================================================


