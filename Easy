Challenge Name: Cities With Completed Trades

Solution:

SELECT city, Count(order_id) c
FROM trades t inner join users u on t.user_id = u.user_id
WHERE status='Completed'
GROUP BY city
ORDER BY c desc
LIMIT 3

============================================================================================

Challenge Name: Page With No Likes

Solution:

SELECT page_id
FROM pages
Where page_id not in ( SELECT distinct page_id from page_likes);

============================================================================================

Challenge Name: Laptop vs Mobile Viewership

Solution:

SELECT
Sum(CASE WHEN device_type = 'laptop' THEN 1 ELSE 0 END) as laptop_views,
Sum(CASE WHEN device_type <> 'laptop' THEN 1 ELSE 0 END) as mobile_views
FROM viewership;

============================================================================================

Challenge Name: Teams Power Users

SELECT sender_id, Count(message_id) c
FROM messages
WHERE EXTRACT(Month FROM sent_date) = '8' and EXTRACT(YEAR FROM sent_date) = '2022'
GROUP BY sender_id
ORDER BY c Desc
LIMIT 2;

============================================================================================

Challenge Name: Highest Number of Products

SELECT user_id, Count(product_id) as product_num
FROM user_transactions
GROUP BY user_id
having Sum(spend) >= 1000
ORDER BY product_num Desc, Sum(spend) Desc
LIMIT 3;

============================================================================================

Challenge Name: Histogram of Tweets

With t as
(SELECT user_id, COUNT(tweet_id) as num_tweets
FROM tweets
WHERE tweet_date BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY user_id)

SELECT num_tweets, Count(user_id) as num_users
FROM t
group by num_tweets;

============================================================================================

Challenge Name: Spare Server Capacity

With t as 
(SELECT  f.datacenter_id, monthly_capacity, Sum(monthly_demand) as demand
FROM forecasted_demand f 
INNER JOIN datacenters d on f.datacenter_id = d.datacenter_id
GROUP BY f.datacenter_id, monthly_capacity)

SELECT datacenter_id, (monthly_capacity - demand) as spare_capacity
FROM t
ORDER BY datacenter_id;


============================================================================================

Challenge Name: Duplicate Job Listings

WITH t as (
SELECT RANK() OVER(partition by company_id,  title, description order by job_id) as dup_rank
FROM job_listings)

SELECT count(*) FROM t WHERE dup_rank <> 1; 


============================================================================================

Challenge Name: Average Post Hiatus (Part 1)

SELECT user_id,
MAX(post_date::DATE) - MIN(post_date:: DATE) as days_between
FROM posts
WHERE EXTRACT(YEAR from post_date) = '2021'
GROUP BY user_id
HAVING Count(post_id)>1;

============================================================================================

Challenge Name: App Clickthrough Rate (CTR)

SELECT app_id,
ROUND( 
  (Sum(CASE WHEN event_type = 'click' THEN 1 ELSE 0 END)*100.0) /
    Sum(CASE WHEN event_type = 'impression' THEN 1 ELSE 0 END)
  , 2) as ctr
FROM events
WHERE EXTRACT (YEAR from timestamp) = '2022'
GROUP BY app_id;

============================================================================================


Challenge Name: Histogram of Users and Purchases

WITH t as (
  SELECT user_id, product_id, transaction_date,
  RANK() OVER (partition by user_id order by transaction_date Desc) as ranking
  FROM user_transactions
 )
  
SELECT  transaction_date, Count(Distinct user_id) as num_users, 
Count(product_id) as num_products 
FROM t
WHERE ranking = 1
GROUP BY transaction_date;

============================================================================================

Challenge Name: Unfinished Parts

SELECT distinct part 
FROM parts_assembly
WHERE finish_date is NULL;

============================================================================================

Challenge Name: Photoshop Revenue Analysis

SELECT customer_id, SUM(revenue)
FROM adobe_transactions
WHERE customer_id in (
  SELECT distinct customer_id 
  FROM adobe_transactions
  WHERE product = 'Photoshop'
)
  AND product <> 'Photoshop'
GROUP BY customer_id
ORDER BY customer_id;

============================================================================================

Challenge Name: Subject Matter Experts

SELECT employee_id
FROM employee_expertise
GROUP BY employee_id
HAVING (SUM(years_of_experience) >= 8 AND COUNT(domain) = 1)
  OR (SUM(years_of_experience) >= 12 AND COUNT(domain) = 2);
  
 ====== OR ======

WITH t as (
  SELECT employee_id, domain, 
  SUM(years_of_experience) OVER(partition by employee_id, domain) as dom_exp,
  SUM(years_of_experience) OVER(partition by employee_id) as total_exp,
  COUNT(domain) OVER(partition by employee_id) as dom_cnt
  FROM employee_expertise
)

SELECT distinct employee_id 
FROM t
WHERE dom_exp>=8 OR (total_exp >= 12 AND dom_cnt = 2);

============================================================================================

Challenge Name: Data Science Skills

SELECT candidate_id 
FROM candidates
WHERE skill in ('Python', 'Tableau', 'PostgreSQL')
GROUP BY candidate_id
HAVING COUNT(skill) = 3
ORDER BY candidate_id;

============================================================================================

Challenge Name: Final Account Balance

SELECT account_id,
SUM(Case WHEN transaction_type = 'Deposit' then amount else 0 end) - 
  SUM(Case WHEN transaction_type = 'Deposit' then 0 else amount end) as final_balance
FROM transactions
GROUP BY account_id;

============================================================================================

Challenge Name: Unique Money transfer Relationships

WITH t as (
  SELECT payer_id, recipient_id FROM payments
  INTERSECT
  SELECT recipient_id, payer_id FROM payments
)

SELECT COUNT(payer_id)/2 as unique_relationships
FROM t;

============================================================================================

Challenge Name: Ad Campaign ROAS

SELECT advertiser_id, ROUND((SUM(revenue)/SUM(spend))::DECIMAL, 2) as ROAS
FROM ad_campaigns
GROUP BY advertiser_id
ORDER BY advertiser_id;

============================================================================================

Challenge Name: Average Review Ratings

SELECT EXTRACT(Month from submit_date) as month, product_id,
ROUND(AVG(stars), 2) as avg_stars
FROM reviews
GROUP BY month, product_id
ORDER BY month, product_id;


============================================================================================

Challenge Name: Second Day Confirmation

SELECT distinct user_id 
FROM emails e INNER JOIN texts t on e.email_id = t.email_id
WHERE DATE_PART('day', action_date - signup_date) = 1;


============================================================================================

Challenge Name: Top Rated Business

SELECT  COUNT(business_id) as business_count,
ROUND(100.0 * COUNT(business_id) / (SELECT COUNT(business_id) FROM reviews) , 0)
FROM reviews
WHERE review_stars in (4, 5);


WHERE DATE_PART('day', action_date - signup_date) = 1;


============================================================================================

Challenge Name: Apple Pay Volume

SELECT merchant_id,
SUM(CASE WHEN LOWER(payment_method)  = 'apple pay' THEN transaction_amount ELSE 0 END) as total_transaction
FROM transactions
GROUP BY merchant_id
ORDER BY total_transaction DESC;


============================================================================================

Challenge Name: Cards Issued Difference

SELECT card_name
, MAX(issued_amount)  - MIN(issued_amount) as difference
FROM monthly_cards_issued
GROUP BY card_name
ORDER BY difference DESC


============================================================================================

Challenge Name: Compressed Mean

SELECT ROUND(SUM(item_count::DECIMAL * order_occurrences)/SUM(order_occurrences), 1) 
FROM items_per_order;

============================================================================================

Challenge Name: Pharmacy Analytics (Part 1)

SELECT drug,
SUM(total_sales - cogs) as total_profit
FROM pharmacy_sales
GROUP BY drug
ORDER BY total_profit DESC
LIMIT 3;


============================================================================================


Challenge Name: Pharmacy Analytics (Part 2)

SELECT manufacturer, COUNT(drug) as drug_count, SUM(cogs - total_sales) as total_loss
FROM pharmacy_sales
WHERE cogs > total_sales
GROUP BY manufacturer
ORDER BY total_loss DESC;

============================================================================================


Challenge Name: Pharmacy Analytics (Part 3)

SELECT manufacturer, Concat('$', ROUND(SUM(total_sales)/1000000), ' million') as sale 
FROM pharmacy_sales
GROUP BY manufacturer
ORDER BY SUM(total_sales) DESC;

============================================================================================

Challenge Name: Patient Support Analysis (Part 1)

SELECT COUNT(policy_holder_id)
FROM (
  SELECT policy_holder_id, COUNT(case_id)
  FROM callers
  GROUP BY policy_holder_id
  HAVING COUNT(case_id)>=3
)as t ;

============================================================================================

Challenge Name: Patient Support Analysis (Part 2)

SELECT ROUND(SUM(CASE WHEN call_category IS NULL OR call_category='n/a' THEN 1 ELSE 0 END)* 100.0
  / (SELECT COUNT(*) FROM callers), 1)
FROM callers;

============================================================================================



